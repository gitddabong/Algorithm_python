x = 1
연산 횟수가 없으므로 result = 0

x = 2
d[2] = d[1] + 1 = 0 + 1 = 1
d[2] = 1, d[1] + 1 = 1
result = 1

x = 3
d[3] = d[2] + 1 = 1 + 1 = 2
d[3] = 2, d[1] + 1 = 1
result = 1

x = 4
d[4] = d[3] + 1 = 2 + 1 = 3
d[4] = 3, d[2] + 1 = 2
result = 2

x = 5
d[5] = d[4] + 1 = 3
d[5] = 3, d[1] + 1 = 2
result = 2

x = 6
d[6] = d[5] + 1 = 3
d[6] = 3, d[3] + 1 = 2 -> d[6] = 2
d[6] = 2, d[2] + 1 = 2 -> d[6] = 2
result = 2

x = 7
d[7] = 3
result = 3




해설 ---------------------------------

다이나믹 프로그래밍 방법은 그리디로 모든 경우를 걸러낼 수 없을 때 사용한다.
그리고 결과값을 저장하여 연산 시간을 단축한다.

이 문제에서 선택할 수 있는 방법은 
1. 5로 나누기
2. 3으로 나누기
3. 2로 나누기
4. 1을 빼기

총 4가지.

이 중에서 5로 나눈 값이 제일 작을 수도 있고
3으로 나눈 값이 제일 작을 수도 있다.
그러나 나눈 값끼리 크기를 비교하는 것은 의미가 없다.
3으로도 나누어지고 5로도 나누어 지는 수는 처음에 무엇으로 나누던 실행 횟수는 동일하다.
세 수로 나누는 것이 불가능한 경우 마지막 방법으로 -1을 더한다.

이 알고리즘에서는 -1을 미리 더한 값과 2, 3, 5로 나눈 값을 비교해서 최솟값을 고른다.
어차피 그 숫자로 떨어지지 않는 숫자라면 -1을 더해두는 게 낫고
떨어지는 숫자라면 그 수를 고르면 되기 때문에
연산을 좀 더 단순하게 바꿔놓은 것이다.

각 연산마다 +1이 들어가는 이유는 최소의 연산 횟수를 구하는 것이 목표이기 때문에
연산 횟수를 계산하기 위함이다.



